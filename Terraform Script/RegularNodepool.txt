# The regular node pool. 
resource "alicloud_cs_kubernetes_node_pool" "default" {
  cluster_id            = alicloud_cs_managed_kubernetes.default.id              # The ACK cluster name. 
  node_pool_name        = "rtf-ack-nodepool-${var.env}"                                    # The node pool name. 
  vswitch_ids           = var.vswitch_ids # The vSwitch to which the node pool belongs. Specify one or more vSwitch IDs. The vSwitches must reside in the zone specified by availability_zone. 
  instance_types        = var.worker_instance_types
  instance_charge_type  = "PostPaid"   # Use PrePaid for subscription billing type
  desired_size          = 2            # The expected number of nodes in the node pool. 
  #password              = var.password # The password that is used to log on to the cluster by using SSH. 
  install_cloud_monitor = true         # Specify whether to install the CloudMonitor agent on the nodes in the cluster. 
  system_disk_category  = "cloud_efficiency"
  system_disk_size      = 100
  image_type            = "AliyunLinux"

  #kms_alias                    = var.kms_alias
  ram_role_name                = "role_arn-${var.env}"
  security_group_ids = [alicloud_security_group.ack_worker_sg.id]  # Attach worker SG
  data_disks {              # The data disk configuration of the node. 
    category = "cloud_essd" # The disk type. 
    size     = 250          # The disk size. 
  }
}


# Create a managed node pool. 
resource "alicloud_cs_kubernetes_node_pool" "managed_node_pool" {
  cluster_id     = alicloud_cs_managed_kubernetes.default.id              # The ACK cluster name. 
  node_pool_name = "rtf-ack-managed_nodepool-${var.env}"                            # The node pool name. 
  resource_group_id = var.resource_group_id
  vswitch_ids    = var.vswitch_ids # The vSwitch to which the node pool belongs. Specify one or more vSwitch IDs. The vSwitches must reside in the zone specified by availability_zone. 
  desired_size   = 2                                                      # The expected number of nodes in the node pool. 
  #security_group_ids = [alicloud_security_group.ack_worker_sg.id]  # Attach worker SG
  management {
    auto_repair     = true
    auto_upgrade    = true
    max_unavailable = 1
  }
  instance_types        = var.worker_instance_types
  instance_charge_type  = "PostPaid"
  key_name              = var.key_name
  install_cloud_monitor = true
  system_disk_category  = "cloud_essd"
  system_disk_size      = 100
  image_type            = "AliyunLinux"
  
  data_disks {
    category = "cloud_essd"
    size     = 250
  }
  
}



variable "node_vswitch_ids" {
  description = "List of existing node vswitch ids for terway."
  type        = list(string)
  default     = []
}

# This variable specifies the CIDR blocks for creating vSwitches. 
variable "node_vswitch_cidrs" {
  description = "List of cidr blocks used to create several new vswitches when 'node_vswitch_ids' is not specified."
  type        = list(string)
  default     = ["192.168.0.0/23", "192.168.2.0/23", "192.168.4.0/23"]
}


---------------------------

# Create a security group for the ACK worker nodes (node pool)
resource "alicloud_security_group" "ack_worker_sg" {
  security_group_name        = "rtf-ack-worker-sg-${var.env}"
  description = "Security group for ACK managed Kubernetes worker nodes"
}

# Inbound rule: Allow HTTP traffic (port 80) to the worker nodes
resource "alicloud_security_group_rule" "allow_http_worker" {
  type              = "ingress"
  security_group_id = alicloud_security_group.ack_worker_sg.id
  ip_protocol       = "tcp"
  port_range        = "80/80"
  cidr_ip           = "0.0.0.0/0"  # Allow from anywhere
}

# Inbound rule: Allow HTTPS traffic (port 443) to the worker nodes
resource "alicloud_security_group_rule" "allow_https_worker" {
  type              = "ingress"
  security_group_id = alicloud_security_group.ack_worker_sg.id
  ip_protocol       = "tcp"
  port_range        = "443/443"
  cidr_ip           = "0.0.0.0/0"  # Allow from anywhere
}

# Inbound rule: Allow SSH traffic (port 22) to the worker nodes (replace with your IP)
resource "alicloud_security_group_rule" "allow_ssh_worker" {
  type              = "ingress"
  security_group_id = alicloud_security_group.ack_worker_sg.id
  ip_protocol       = "tcp"
  port_range        = "22/22"
  cidr_ip           = "192.168.0.0/16"  # Replace with your IP address
}

resource "alicloud_security_group_rule" "nodes" {
  type              = "ingress"
  security_group_id = alicloud_security_group.ack_worker_sg.id
  ip_protocol       = "all"
  port_range        = "0/65535"
  cidr_ip           = "192.168.0.0/16"  # Replace with your IP address
}

resource "alicloud_security_group_rule" "nodes_inbound" {
  type              = "ingress"
  security_group_id = alicloud_security_group.ack_worker_sg.id
  ip_protocol       = "tcp"
  port_range        = "1025/65535"
  cidr_ip           = "192.168.0.0/16"  # Replace with your IP address
}

# Outbound rule: Allow all outbound traffic from the worker nodes
resource "alicloud_security_group_rule" "allow_all_outbound_worker" {
  type              = "egress"
  security_group_id = alicloud_security_group.ack_worker_sg.id
  ip_protocol       = "all"
  port_range        = "all"
  cidr_ip           = "0.0.0.0/0"  # Allow all outbound traffic
}




output "worker_sg_id" {
  value = alicloud_security_group.ack_worker_sg.id
}

